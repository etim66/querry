import { ScrollView, HorizontalBox} from "std-widgets.slint";

import { Theme } from "../../theme.slint";
import { AppConfig } from "../../global.slint";

import { HeaderItem } from "./header_item.slint";


export component HeadersSection inherits Rectangle {
    padding: 20px;
    border-color: Theme.border_color;
    horizontal-stretch: 1;
    border-width: Theme.border_width;
    height: 50px;
    width: 100%;
    background: Theme.dark_theme ? Theme.app_background_color.darker(-30%) : Theme.app_background_color.darker(30%);


    TouchArea {
        clicked => {
            root.focus()
        }
    }

    forward-focus: my-key-handler;
    my-key-handler := FocusScope {
        key-pressed(event) => {

            if (event.text == Key.LeftArrow) {
                // move left
                scroll.viewport-x += 30px;
                checkScrollEdges()
            }
            if (event.text == Key.RightArrow) {
                // move right
                scroll.viewport-x -= 30px;
                checkScrollEdges()
            }
            
            if (event.modifiers.control) {
                if (event.text == "l") {
                    Theme.dark_theme = !Theme.dark_theme;
                }   
            }
            
            accept
        }
    }

    property <length> min_scroll_x;
    function checkScrollEdges() {
        min_scroll_x = scroll.visible-width - scroll.viewport-width;
    
        if (scroll.viewport-x >= 0) {
            scroll.viewport-x = 0px;
        }

        if (scroll.viewport-x <= min_scroll_x) {
            scroll.viewport-x = min_scroll_x;
        }
    }

    scroll := ScrollView {
        horizontal-scrollbar-policy: always-off;
        content_box := HorizontalBox {
            spacing: 10px;
            height: 100%;

            for list_item[i] in AppConfig.selected_requests: HeaderItem {
                collection_icon: list-item.collection_icon;
                name: list-item.item.name;
                index: i;
                id: list-item.item.id;
                component_background: root.background;

                request-focus-parent => {
                    root.focus();
                }
            }
        }
    }
}
