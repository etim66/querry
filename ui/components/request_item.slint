import { Button, CheckBox, HorizontalBox, VerticalBox } from "std-widgets.slint";
import { AppConfig, CollectionItemActive } from "../global.slint";
import { Theme } from "../theme.slint";


export component RequestComponent inherits Rectangle {
    in property <string> id;
    in property <string> name;
    in property <string> url;
    in property <string> protocol;
    in property <string> http_method;
    in property <int> index;
    in property <int> collection_index;

    height: 40px;
    touch-area := TouchArea {
        clicked => {
            AppConfig.add_selected_request(index, collection_index);
        }
    }

    HorizontalLayout {
        padding-top: 5px;
        padding-bottom: 5px;
        padding-left: 10px;
        padding-right: 10px;
        spacing: 10px;

        VerticalLayout {
            padding-right: 10px;
            alignment: center;
            request_method := Text {
                text: http_method.to-uppercase();
                font-size: Theme.label_font_size_small;
                vertical-alignment: center;
                wrap: TextWrap.no-wrap;
                overflow: TextOverflow.elide;

                init => {
                    if http_method == "GET" {
                        self.color = #04359e;
                    } else if http_method == "POST" {
                        self.color = #05862c;
                    } else if http_method == "PUT" {
                        self.color = #c26107;
                    } else if http_method == "DELETE" {
                        self.color = #cc0909;
                    } else if http_method == "PATCH" {
                        self.color = #fca130;
                    } else if http_method == "OPTIONS" {
                        self.color = #0d5aa7;
                    }
                }
            }

            
        }

        // Conditionally display the TextInput for renaming
        if AppConfig.active_request_rename_mode == true && AppConfig.active_request_item.index == index :
            text_input := TextInput {
                color: Theme.label_text_color;
                vertical-alignment: center;
                wrap: no-wrap;
                single-line: true;
                text: name;
                font-size: Theme.label_font_size_medium_small;
                accepted() => {
                    if self.text != "" {
                        // Call update request callback
                        AppConfig.update_request_item(
                            root.id,
                            self.text,
                            root.protocol,
                            root.http_method,
                            root.url,
                            root.index
                        );
                        
                    }
                    AppConfig.active_request_rename_mode = false;
                }

                init => {
                    // Give focus to text box
                    self.focus();
                    self.select-all();
                }
            }

        // Conditionally display the Text when not renaming
        if !(AppConfig.active_request_rename_mode == true && AppConfig.active_request_item.index == index) :
            text := Text {
                vertical-alignment: center;
                text: name;
                font-size: Theme.label_font_size_medium_small;
                color: Theme.label_text_color;
                max-width: 180px;
                wrap: TextWrap.no-wrap;
                overflow: TextOverflow.elide;
            }


        Rectangle {horizontal-stretch: 1;}
        
        VerticalLayout {
            alignment: center;
            more_btn := Rectangle {
                width: Theme.icon_box_with;
                height: Theme.icon_box_with;
                background: more_touch.has-hover ? Theme.hover_color : transparent;
                border-radius: Theme.border_radius;
    
                more_touch := TouchArea{
                    mouse-cursor: self.has-hover ? pointer : default;
                    property<length> position_x;
                    property<length> position_y;
    
                    clicked => {
                        position_x = root.x + root.width + 50px;
                        position_y = AppConfig.active_collection_item.y + ((index * root.height) + AppConfig.requests_viewport_y) + 30px;
                        AppConfig.active_request_item = {
                            id: id,
                            name: name,
                            index: index,
                            x: position_x,
                            y: position_y,
                            collection_index: collection_index
                        };
    
                        AppConfig.show_request_more_dropdown = !AppConfig.show_request_more_dropdown;
                    }
                }
                more := Image {
                    source: @image-url("../icons/more.svg");
                    colorize: Theme.icon_color;
                    visible: touch-area.has-hover ? true : more_touch.has-hover ? true : false;
                }
            }
        }
        
    }
}