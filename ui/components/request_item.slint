import { Button, CheckBox, HorizontalBox, VerticalBox } from "std-widgets.slint";
import { AppConfig, CollectionItemActive } from "../global.slint";
import { Theme } from "../theme.slint";


export component RequestComponent inherits Rectangle {
    in property <string> id;
    in property <string> name;
    in property <string> url;
    in property <string> protocol;
    in property <string> http_method;
    in property <color> component_background;
    in property <int> index;

    height: 40px;
    touch-area := TouchArea {}
    background: touch-area.has-hover ? component_background.darker(20%) : AppConfig.active_request_item.index == index ? component_background.darker(20%) : component_background;
    border-width: Theme.hover_border_width;

    HorizontalLayout {
        padding-top: 5px;
        padding-bottom: 5px;
        padding-left: 10px;
        padding-right: 10px;
        spacing: 10px;
        alignment: space-between;

        VerticalLayout {
            alignment: center;
            Text {
                text: http_method.to-uppercase();
                font-size: Theme.label_font_size_small;
                color: Theme.label_text_color;
                vertical-alignment: center;
                wrap: TextWrap.no-wrap;
                overflow: TextOverflow.elide;
            }
        }

        if AppConfig.active_request_rename_mode == true && AppConfig.active_request_item.index == index :
            text_input := TextInput {
                color: Theme.label_text_color;
                horizontal-stretch: 1;
                vertical-alignment: center;
                wrap: no-wrap;
                single-line: true;
                text: name;
                font-size: Theme.label_font_size_medium_small;
                accepted() => {
                    if self.text != "" {
                        // Call update request callback
                    }
                    AppConfig.active_request_rename_mode = false;
                }

                init => {
                    // Give focus to text box
                    self.focus();
                    self.select-all();
                }

            }
            

        // Conditionally display the Text
        if !(AppConfig.active_request_rename_mode == true && AppConfig.active_request_item.index == index) :
            text := Text {
                vertical-alignment: center;
                text: name;
                font-size: Theme.label_font_size_medium_small;
                color: Theme.label_text_color;

                max-width: 180px;
                wrap: TextWrap.no-wrap;
                overflow: TextOverflow.elide;
            }
        
        VerticalLayout {
            alignment: center;
        
            more_btn := Rectangle {
                width: Theme.icon_box_with;
                height: Theme.icon_box_with;
                background: more_touch.has-hover ? Theme.hover_color : root.background;
                border-radius: Theme.border_radius;
    
                more_touch := TouchArea{
                    mouse-cursor: self.has-hover ? pointer : default;
                    property<length> position_x;
                    property<length> position_y;
    
                    clicked => {
                        position_x = root.x + root.width;
                        position_y = (index * root.height) + AppConfig.requests_viewport_y;
    
                        AppConfig.active_request_item = {
                            id: id,
                            name: name,
                            index: index,
                            x: position_x,
                            y: position_y
                        };
    
                        AppConfig.show_request_more_dropdown = !AppConfig.show_request_more_dropdown;
                    }   
                }
                more := Image {
                    source: @image-url("../icons/more.svg");
                    colorize: Theme.icon_color;
                }
            }    
        }
        
        
    }
}    