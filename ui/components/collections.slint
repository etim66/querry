import { ListView } from "std-widgets.slint";

import { Theme } from "../theme.slint";
import {SearchForm} from "./forms.slint";
import { IconButton } from "./buttons.slint";
import { AppConfig, CollectionItem} from "../global.slint";
import { CollectionComponent } from "./collection_item.slint";
import { BaseButton } from "./buttons.slint";


export component CollectionSection inherits Rectangle {
    border-color: Theme.border_color;
    vertical-stretch: 1;
    border-width: Theme.border_width;
    clip: true;
    in-out property <[CollectionItem]> collection_items: AppConfig.collection_items;
    background: Theme.dark_theme ? Theme.app_background_color.darker(-30%) : Theme.app_background_color.darker(30%);

    init => {
        AppConfig.active_collection_item = {
            name: "",
            id: "",
            index: -1,
            x:-1px,
            y:-1px
        };
    }

    TouchArea {
        clicked => {
            root.focus()
        }
    }

    forward-focus: my-key-handler;
    my-key-handler := FocusScope {
        key-pressed(event) => {

            if (event.text == Key.UpArrow) {
                scroll.viewport-y += 30px;
                checkScrollEdges()
            }
            if (event.text == Key.DownArrow) {
                scroll.viewport-y -= 30px;
                checkScrollEdges()
            } 
            accept
        }
    }

    property <length> min_scroll_y;
    function checkScrollEdges() {
        min_scroll_y = scroll.visible-height - scroll.viewport-height;
    
        if (scroll.viewport-y >= 0) {
            scroll.viewport-y = 0px;
        }

        if (scroll.viewport-y <= min_scroll_y) {
            scroll.viewport-y = min_scroll_y;
        }
    }

    VerticalLayout { 
        padding-bottom: 8px;
        padding-top: 8px;
        padding-left: 5px;
        padding-right: 5px;

        HorizontalLayout {
            horizontal-stretch: 1;
            alignment: LayoutAlignment.end;
            padding-right: 5px;

            Rectangle {
                width: Theme.icon_box_with;
                height: Theme.icon_box_with;
                background: touch.has-hover ? Theme.hover_color : root.background;
                border-radius: Theme.border_radius;
                        
                image := Image {
                    source: @image-url("../icons/create_folder.svg");
                    colorize: Theme.icon_color;
                }

                touch := TouchArea {
                    mouse-cursor: self.has-hover ? pointer : default;
                    clicked => {
                        AppConfig.create_collection();
                    }
                }
            }
        }

        VerticalLayout {
            vertical-stretch: 1;
            scroll := ListView {
                vertical-scrollbar-policy: (AppConfig.show_active_collection_requests == true && AppConfig.active_collection_requests.length > 0) ? always-off : as-needed;
                for list_item[i] in collection_items: CollectionComponent {
                    name: list_item.name;
                    id: list_item.id;
                    component_background: root.background;
                    icon: list_item.icon;
                    index: i;
                    icon_name: list_item.icon_name;
                    request_count: list_item.request_count;
                    request-focus-parent => {
                        root.focus();
                    }
                }

                changed viewport-y => {
                    AppConfig.collections_viewport_y = self.viewport-y;
                }

            }

        }

        SearchForm {
            height: 30px;
        }
    }
}