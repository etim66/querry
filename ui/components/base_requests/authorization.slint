import { ComboBox } from "std-widgets.slint";

import { Theme } from "../../theme.slint";
import { AppConfig, AuthorizationItem } from "../../global.slint";

export component AuthorizationComponent inherits Rectangle {
    background: Theme.app_background_color;
    in-out property <string> request_id: AppConfig.active_selected_request.item.id;
    in-out property <AuthorizationItem> authorization: AppConfig.request_auth_items[0];
    in-out property <string> authorization_type;

    init => {
        if authorization.auth-type == "none" {
            root.authorization_type = "None"
        } else {
            root.authorization_type = "Bearer Token"
        }

        combo.current-value = root.authorization_type;
    }

    changed authorization => {
        if authorization.auth-type == "none" {
            root.authorization_type = "None"
        } else {
            root.authorization_type = "Bearer Token"
        }

        combo.current-value = root.authorization_type;
    }

    VerticalLayout {
        spacing: 15px;
        VerticalLayout {
            Rectangle {
                background: Theme.dark_theme ? Theme.app_background_color.darker(-30%) : Theme.app_background_color.darker(30%);
                height: 40px;
                padding-left: 15px;
                width: 100%;

                HorizontalLayout {
                    width: 100%;
                    alignment: start;
                    padding-left: 15px;

                    Text {
                        color: Theme.label_text_color;
                        font-size: Theme.label_font_size_medium_small;
                        text: "Authorization";
                        opacity: 0.5;
        
                        vertical-alignment: center;
                    }
                }
                
            }
    
            Rectangle {
                width: 100%;
                height: 1px;
                border-color: Theme.border_color;
                border-width: 1px;
            }
        }

        HorizontalLayout {
            alignment: start;
            padding-left: 10px;

            combo := ComboBox {
                width: 140px;
                height: 40px;

                model: ["None", "Bearer Token"];
                current-value: root.authorization_type;

                selected(value) => {
                    if value == "None" {
                        AppConfig.update_request_auth(request_id, "none", "", "");
                    } else {
                        AppConfig.update_request_auth(request_id, "bearer_token", authorization.token, authorization.prefix);
                    }
                }
            }

        }


        if root.authorization.auth-type == "bearer_token":
            VerticalLayout {
                spacing: 15px;
                padding-left: 10px;
                padding-right: 10px;

                Rectangle {
                    width: 100%;
                    padding: 5px;
                    height: 40px;
                    background: Theme.dark_theme ? Theme.app_background_color.darker(-50%) : Theme.app_background_color.darker(50%);
                    border-radius: Theme.border_radius;

                    HorizontalLayout {
                        alignment: center;
                        prefix := TextInput {
                            width: 98%;
                            color: Theme.label_text_color;
                            vertical-alignment: center;
                            wrap: no-wrap; 
                            text: authorization.prefix;
                            font-size: Theme.label_font_size_medium_small;
                            opacity: Theme.text_opacity;
            
                            init => {
                                if (self.text == "" && !self.has-focus) {
                                    self.text = "Prefix";
                                    self.opacity = 0.5;
                                }
                            }
                            changed has-focus => {
                                if self.text == "Prefix" {
                                    self.text = "";
                                    self.opacity = Theme.text_opacity;
                                }

                                if !self.has-focus {
                                    if self.text == "" {
                                        self.text = "Prefix";
                                        self.opacity = 0.5;
                                    }
                                }
                            }
            
                            edited => {
                                if self.text != "Prefix" {
                                    prefix_timer.count = 2;
                                    prefix_timer.running = true;
                                }
                            }
        
                            accepted => {
                                self.clear-focus()
                            }

                            prefix_timer := Timer {
                                in-out property <int> count: 2;
                                interval: 1.5s;
                                running: false;
                                triggered() => {
                                    // Stop timer after 2 ticks
                                    if count <= 0 {
                                        self.running = false;
                                    }

                                    AppConfig.update_request_auth(request_id, "bearer_token", authorization.token, prefix.text);
                                    debug("Prefix timer running ---", count);
                                    count -= 1;
                                }
                            }
                        }
                    }
                    
                }
    
                Rectangle {
                    width: 100%;
                    padding: 5px;
                    height: 40px;
                    background: Theme.dark_theme ? Theme.app_background_color.darker(-50%) : Theme.app_background_color.darker(50%);
                    border-radius: Theme.border_radius;

                    HorizontalLayout {
                        alignment: center;
                        token := TextInput {
                            width: 98%;
                            color: Theme.label_text_color;
                            vertical-alignment: center;
                            wrap: no-wrap; 
                            text: authorization.token;
                            font-size: Theme.label_font_size_medium_small;
                            opacity: Theme.text_opacity;
            
                            init => {
                                if (self.text == "" && !self.has-focus) {
                                    self.text = "Token";
                                    self.opacity = 0.5;
                                }
                            }
                            changed has-focus => {
                                if self.text == "Token" {
                                    self.text = "";
                                    self.opacity = Theme.text_opacity;
                                }

                                if !self.has-focus {
                                    if self.text == "" {
                                        self.text = "Token";
                                        self.opacity = 0.5;
                                    }
                                }
                            }
            
                            edited => {
                                if self.text != "Token" {
                                    token_timer.count = 2;
                                    token_timer.running = true;
                                }
                            }
        
                            accepted => {
                                self.clear-focus()
                            }

                            token_timer := Timer {
                                in-out property <int> count: 2;
                                interval: 1.5s;
                                running: false;
                                triggered() => {
                                    // Stop timer after 2 ticks
                                    if count <= 0 {
                                        self.running = false;
                                    }

                                    AppConfig.update_request_auth(request_id, "bearer_token", token.text, authorization.prefix);
                                    count -= 1;
                                }
                            }
                        }
                    }
                        
                }
            }
            
            

    }

}