import { ListView } from "std-widgets.slint";

import { Button, CheckBox, HorizontalBox, VerticalBox } from "std-widgets.slint";
import { AppConfig, CollectionItemActive } from "../global.slint";
import { Theme } from "../theme.slint";
import { RequestComponent } from "./request_item.slint";


export component CollectionComponent inherits Rectangle {
    in property <string> name;
    in property <string> id;
    in property <color> component_background;
    in property <image> icon;
    in property <int> index;
    in property <string> icon_name;
    in property <int> request_count;
    in-out property <bool> active;
    height: 50px; // Initial height

    touch-area := TouchArea {
        clicked => {
            // Preserve current scroll position before changing active state
            // This might require storing and restoring scroll position in AppConfig or similar
            // if you want to maintain scroll position when expanding/collapsing.

            AppConfig.active_collection_item = {
                id: id,
                name: name,
                index: index,
                x: root.x + root.width,
                y: root.y + root.height
            };
            AppConfig.show_collection_more_dropdown = false;
            root.active = !root.active;

            if root.active == true {
                AppConfig.get_requests(id);
                // Set the height to accommodate the expanded view with the scrollable area
                root.height = 350px; // Adjust this height as needed
            } else {
                root.height = 50px; // Collapse back to initial height
                AppConfig.active_collection_item = {
                    id: "",
                    name: "",
                    index: -1,
                    x:-1px,
                    y:-1px
                };
                AppConfig.active_collection_requests = [];
            }
        }
    }

    background: touch-area.has-hover ? component_background.darker(20%) : AppConfig.active_collection_item.index == index ? component_background.darker(20%) : component_background;
    border-width: Theme.hover_border_width;

    VerticalLayout {
        HorizontalLayout {
            padding-top: 5px;
            padding-bottom: 5px;
            padding-left: 10px;
            padding-right: 10px;
            spacing: 10px;

            VerticalLayout {
                alignment: center;
                padding-right: 10px;
                Rectangle {
                    width: Theme.icon_box_with;
                    height: Theme.icon_box_with;
                    background: touch.has-hover ? Theme.hover_color : root.background;
                    border-radius: Theme.border_radius;

                    touch := TouchArea{
                        mouse-cursor: self.has-hover ? pointer : default;
                        clicked => {
                            AppConfig.active_collection_item = {
                                id: id,
                                name: name,
                                index: index,
                                x: root.x + root.width,
                                y: root.y + root.height
                            };
                            AppConfig.show_icons_popup = !AppConfig.show_icons_popup;
                        }
                    }

                    Image {
                        source: icon;
                        width: Theme.icon_box_with - 2px;
                        height: Theme.icon_box_with - 2px;
                    }
                }
            }


            if AppConfig.active_collection_rename_mode == true && AppConfig.active_collection_item.index == index :
                text_input := TextInput {
                    color: Theme.label_text_color;
                    vertical-alignment: center;
                    wrap: no-wrap;
                    single-line: true;
                    text: name;
                    font-size: Theme.label_font_size_medium_small;
                    accepted() => {
                        if self.text != "" {
                            AppConfig.update_collection(id, self.text, icon_name, index);
                        }
                        AppConfig.active_collection_rename_mode = false;
                    }

                    init => {
                        // Give focus to text box
                        self.focus();
                        self.select-all();
                    }

                }


            // Conditionally display the Text
            if !(AppConfig.active_collection_rename_mode == true && AppConfig.active_collection_item.index == index) :

                VerticalLayout {
                    text := Text {
                        vertical-alignment: center;
                        text: name;
                        font-size: Theme.label_font_size_medium_small;
                        color: Theme.label_text_color;

                        max-width: 200px;
                        wrap: TextWrap.no-wrap;
                        overflow: TextOverflow.elide;
                    }
                    Text {
                        text: "\{request_count} requests";
                        font-size: Theme.label_font_size_small;
                        color: Theme.label_text_color;
                        opacity: 0.4;

                        vertical-alignment: center;
                        wrap: TextWrap.no-wrap;
                        overflow: TextOverflow.elide;
                    }
                }

            
            Rectangle {horizontal-stretch: 1;}
            VerticalLayout {
                alignment: center;

                more_btn := Rectangle {
                    width: Theme.icon_box_with;
                    height: Theme.icon_box_with;
                    background: more_touch.has-hover ? Theme.hover_color : root.background;
                    border-radius: Theme.border_radius;

                    more_touch := TouchArea{
                        mouse-cursor: self.has-hover ? pointer : default;
                        property<length> position_x;
                        property<length> position_y;

                        clicked => {
                            position_x = root.x + root.width;
                            // Calculate the correct y position relative to the window/viewport
                            // This might need adjustment based on the layout of CollectionComponents
                            position_y = root.y + root.height; // Example, may need refinement

                            AppConfig.active_collection_item = {
                                id: id,
                                name: name,
                                index: index,
                                x: position_x,
                                y: position_y
                            };

                            AppConfig.show_collection_more_dropdown = !AppConfig.show_collection_more_dropdown;
                        }
                    }
                    more := Image {
                        source: @image-url("../icons/more.svg");
                        colorize: Theme.icon_color;
                    }
                }
            }
        }

        if root.active == true && AppConfig.active_collection_item.index == index:
            HorizontalLayout {
                padding-right: 40px;
                padding-left: 30px;

                // Wrap the inner VerticalLayout with ScrollView
                ListView {
                    // Give the ScrollView a height so it knows when to scroll.
                    // This height should be the total desired height for the scrollable request list area.
                    height: 300px; // Adjust this value based on your layout

                
                    for list_item[i] in AppConfig.active_collection_requests: RequestComponent {
                        id: list_item.id;
                        name: list_item.name;
                        url: list_item.url; // Corrected typo here
                        protocol: list_item.protocol;
                        http_method: list_item.http_method;
                        background: root.background;
                        index: i;
                    }
                
                }
            }
    }
}